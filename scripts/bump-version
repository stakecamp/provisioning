#!/usr/bin/env node
const fs = require('fs')
const root = require('path').resolve(__dirname, '..')

const mainNet = `${root}/versions/TAG_MAINNET.txt`
const mainNetConfig = `${root}/versions/TAG_MAINNET_CONFIG.txt`

const elrondGo = 'ElrondNetwork/elrond-go'
const elrondConfigMainnet = 'ElrondNetwork/elrond-config-mainnet'

const getVersion = (repo) => {
  const request = require('https').request({
    method: 'GET',
    hostname: 'api.github.com',
    path: `/repos/${repo}/releases/latest`,
    headers: {
      'User-Agent': 'elrond-go-versions',
      'Accept': 'application/vnd.github.v3+json'
    }
  })

  return new Promise((resolve, reject) => {
    request.on('response', (response) => {
      let body = ''
      response.on('data', (chunk) => {
        body += chunk
      })
      response.on('end', () => {
        const release = JSON.parse(body)
        const version = release.name
        resolve(version)
      })
    })
    request.on('error', (error) => {
      reject(error)
    })
    request.end()
  })
}

const readVersion = (pathname) => {
  if (fs.existsSync(pathname)) {
    return fs.readFileSync(pathname, 'utf8')
  }
}

const ensureFile = (pathname) => {
  try {
    fs.accessSync(pathname)
  } catch (error) {
    fs.writeFileSync(pathname, '', 'utf8')
  }
}

const writeVersion = (pathname, version) => {
  ensureFile(pathname)
  fs.writeFileSync(pathname, version, 'utf8')
}

const updateVersion = (repo, pathname) => getVersion(repo)
  .then((version) => {
    const currentVersion = readVersion(pathname)
    if (currentVersion !== version) {
      console.log(`Updating ${currentVersion} to ${version}`)
      writeVersion(pathname, version)
    }
  }).catch(console.error)

updateVersion(elrondGo, mainNet).catch((error) => {
  console.error(error)
  process.exit(1)
})

updateVersion(elrondConfigMainnet, mainNetConfig).catch((error) => {
  console.error(error)
  process.exit(1)
})
